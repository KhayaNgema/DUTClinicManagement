@using System.Security.Claims

@{
    ViewData["Title"] = "Chat";
    Layout = "~/Views/Shared/_PagesLayout.cshtml";

    var currentUserId = User.FindFirstValue(ClaimTypes.NameIdentifier);
}

<style>
    .chat-container {
        max-width: 700px;
        margin: 30px auto;
        background-color: #ffffff;
        border: 1px solid #dee2e6;
        border-radius: 10px;
        display: flex;
        flex-direction: column;
        height: 80vh;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.05);
    }

    .chat-header {
        background: linear-gradient(to right, #010123, #8B0000);
        color: white;
        padding: 15px;
        border-top-left-radius: 10px;
        border-top-right-radius: 10px;
    }

    .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 15px;
        background-color: #f8f9fa;
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .chat-message {
        display: inline-block;
        padding: 10px 15px;
        border-radius: 20px;
        word-wrap: break-word;
        white-space: pre-wrap;
        max-width: 70%;
        font-size: 15px;
        line-height: 1.4;
    }

    .chat-message.user {
        background: linear-gradient(to right, #010123, #8B0000);
        color: white;
        align-self: flex-end;
        text-align: right;
        border-bottom-right-radius: 0;
    }

    .chat-message.bot {
        background-color: #e4e6eb;
        color: black;
        align-self: flex-start;
        text-align: left;
        border-bottom-left-radius: 0;
    }

    .chat-input {
        padding: 10px;
        border-top: 1px solid #dee2e6;
        background-color: #ffffff;
        border-bottom-left-radius: 10px;
        border-bottom-right-radius: 10px;
    }

    .chat-input textarea {
        width: 100%;
        border-radius: 20px;
        resize: none;
        padding: 10px 15px;
        overflow: hidden;
        line-height: 1.5;
        max-height: 150px;
        border: 1px solid #ccc;
    }

    .chat-input .send-button {
        margin-left: 10px;
        white-space: nowrap;
    }
</style>

<div class="container">
    <div class="chat-container">
        <div class="chat-header">
            <h5 class="mb-0">Chat Assistant</h5>
        </div>
        <div class="chat-messages" id="chatMessages">
            <div class="text-muted">Say hello to start chatting...</div>
        </div>
        <div class="chat-input d-flex align-items-end">
            <textarea id="chatInput" class="form-control" rows="1" placeholder="Type your message..."></textarea>
            <button class="btn btn-primary send-button" id="sendBtn"><i class="bi bi-send"></i></button>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
<script>
    const currentUserId = '@currentUserId';
    let conversationId = 0;

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chatHub")
        .build();

    async function loadConversationHistory() {
        if (conversationId === 0) return;

        const messages = await $.getJSON('/Chats/GetConversationHistory', { conversationId });
        const chat = $('#chatMessages');
        chat.empty();

        if (messages.length === 0) {
            chat.append('<div class="text-muted">Say hello to start chatting...</div>');
        } else {
            messages.forEach(msg => {
                const isUser = msg.senderId === currentUserId;
                const cssClass = isUser ? 'user' : 'bot';
                const alignment = isUser ? 'text-end' : 'text-start';
                const messageHtml = `
                    <div class="${alignment} mb-2">
                        <div class="chat-message ${cssClass} d-inline-block">${escapeHtml(msg.content)}</div>
                         <div class="text-muted small mb-1">${msg.senderName} • ${msg.sentAt}</div>
                    </div>
                `;
                chat.append(messageHtml);
            });
        }

        chat.scrollTop(chat[0].scrollHeight);
    }

    connection.start().then(async () => {
        conversationId = await connection.invoke("GetOrCreateConversation");
        await loadConversationHistory();
    }).catch(err => console.error(err.toString()));

    $('#sendBtn').on('click', sendMessage);
    $('#chatInput').on('keypress', function (e) {
        if (e.which === 13 && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    });

    function sendMessage() {
        const message = $('#chatInput').val().trim();
        if (!message || conversationId === 0) return;

        const timestamp = new Date().toLocaleString();
        const chat = $('#chatMessages');

        const messageHtml = `
            <div class="text-end mb-2">
                <div class="chat-message user d-inline-block">${escapeHtml(message)}</div>
                <div class="text-muted small mb-1">You • ${timestamp}</div>
            </div>
        `;
        chat.append(messageHtml);
        $('#chatInput').val('');
        chat.scrollTop(chat[0].scrollHeight);
        connection.invoke("SendMessageToDepartment", conversationId, message);
    }

    connection.on("ReceiveMessage", function (fromUser, message) {
        if (fromUser === currentUserId) return;

        const timestamp = new Date().toLocaleString();
        const chat = $('#chatMessages');

        const messageHtml = `
            <div class="text-start mb-2">
                <div class="chat-message bot d-inline-block">${escapeHtml(message)}</div>
                <div class="text-muted small mb-1">Someone • ${timestamp}</div>
            </div>
        `;
        chat.append(messageHtml);
        chat.scrollTop(chat[0].scrollHeight);
    });

    function escapeHtml(text) {
        return $('<div>').text(text).html();
    }
</script>
